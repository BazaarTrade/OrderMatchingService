// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: internal/proto/api.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MatchingEngine_PlaceOrder_FullMethodName       = "/pb.matchingEngine/PlaceOrder"
	MatchingEngine_CancelOrder_FullMethodName      = "/pb.matchingEngine/CancelOrder"
	MatchingEngine_GetCurrentOrders_FullMethodName = "/pb.matchingEngine/GetCurrentOrders"
	MatchingEngine_GetOrders_FullMethodName        = "/pb.matchingEngine/GetOrders"
	MatchingEngine_CreateOrderBook_FullMethodName  = "/pb.matchingEngine/CreateOrderBook"
	MatchingEngine_DeleteOrderBook_FullMethodName  = "/pb.matchingEngine/DeleteOrderBook"
)

// MatchingEngineClient is the client API for MatchingEngine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MatchingEngineClient interface {
	PlaceOrder(ctx context.Context, in *PlaceOrderReq, opts ...grpc.CallOption) (*OrdersRes, error)
	CancelOrder(ctx context.Context, in *CancelOrderReq, opts ...grpc.CallOption) (*Order, error)
	GetCurrentOrders(ctx context.Context, in *UserIDReq, opts ...grpc.CallOption) (*OrdersRes, error)
	GetOrders(ctx context.Context, in *UserIDReq, opts ...grpc.CallOption) (*OrdersRes, error)
	CreateOrderBook(ctx context.Context, in *OrderBookSymbol, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteOrderBook(ctx context.Context, in *OrderBookSymbol, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type matchingEngineClient struct {
	cc grpc.ClientConnInterface
}

func NewMatchingEngineClient(cc grpc.ClientConnInterface) MatchingEngineClient {
	return &matchingEngineClient{cc}
}

func (c *matchingEngineClient) PlaceOrder(ctx context.Context, in *PlaceOrderReq, opts ...grpc.CallOption) (*OrdersRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrdersRes)
	err := c.cc.Invoke(ctx, MatchingEngine_PlaceOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchingEngineClient) CancelOrder(ctx context.Context, in *CancelOrderReq, opts ...grpc.CallOption) (*Order, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Order)
	err := c.cc.Invoke(ctx, MatchingEngine_CancelOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchingEngineClient) GetCurrentOrders(ctx context.Context, in *UserIDReq, opts ...grpc.CallOption) (*OrdersRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrdersRes)
	err := c.cc.Invoke(ctx, MatchingEngine_GetCurrentOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchingEngineClient) GetOrders(ctx context.Context, in *UserIDReq, opts ...grpc.CallOption) (*OrdersRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrdersRes)
	err := c.cc.Invoke(ctx, MatchingEngine_GetOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchingEngineClient) CreateOrderBook(ctx context.Context, in *OrderBookSymbol, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MatchingEngine_CreateOrderBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchingEngineClient) DeleteOrderBook(ctx context.Context, in *OrderBookSymbol, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MatchingEngine_DeleteOrderBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MatchingEngineServer is the server API for MatchingEngine service.
// All implementations must embed UnimplementedMatchingEngineServer
// for forward compatibility.
type MatchingEngineServer interface {
	PlaceOrder(context.Context, *PlaceOrderReq) (*OrdersRes, error)
	CancelOrder(context.Context, *CancelOrderReq) (*Order, error)
	GetCurrentOrders(context.Context, *UserIDReq) (*OrdersRes, error)
	GetOrders(context.Context, *UserIDReq) (*OrdersRes, error)
	CreateOrderBook(context.Context, *OrderBookSymbol) (*emptypb.Empty, error)
	DeleteOrderBook(context.Context, *OrderBookSymbol) (*emptypb.Empty, error)
	mustEmbedUnimplementedMatchingEngineServer()
}

// UnimplementedMatchingEngineServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMatchingEngineServer struct{}

func (UnimplementedMatchingEngineServer) PlaceOrder(context.Context, *PlaceOrderReq) (*OrdersRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceOrder not implemented")
}
func (UnimplementedMatchingEngineServer) CancelOrder(context.Context, *CancelOrderReq) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (UnimplementedMatchingEngineServer) GetCurrentOrders(context.Context, *UserIDReq) (*OrdersRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentOrders not implemented")
}
func (UnimplementedMatchingEngineServer) GetOrders(context.Context, *UserIDReq) (*OrdersRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrders not implemented")
}
func (UnimplementedMatchingEngineServer) CreateOrderBook(context.Context, *OrderBookSymbol) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrderBook not implemented")
}
func (UnimplementedMatchingEngineServer) DeleteOrderBook(context.Context, *OrderBookSymbol) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrderBook not implemented")
}
func (UnimplementedMatchingEngineServer) mustEmbedUnimplementedMatchingEngineServer() {}
func (UnimplementedMatchingEngineServer) testEmbeddedByValue()                        {}

// UnsafeMatchingEngineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatchingEngineServer will
// result in compilation errors.
type UnsafeMatchingEngineServer interface {
	mustEmbedUnimplementedMatchingEngineServer()
}

func RegisterMatchingEngineServer(s grpc.ServiceRegistrar, srv MatchingEngineServer) {
	// If the following call pancis, it indicates UnimplementedMatchingEngineServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MatchingEngine_ServiceDesc, srv)
}

func _MatchingEngine_PlaceOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchingEngineServer).PlaceOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchingEngine_PlaceOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchingEngineServer).PlaceOrder(ctx, req.(*PlaceOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchingEngine_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchingEngineServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchingEngine_CancelOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchingEngineServer).CancelOrder(ctx, req.(*CancelOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchingEngine_GetCurrentOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchingEngineServer).GetCurrentOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchingEngine_GetCurrentOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchingEngineServer).GetCurrentOrders(ctx, req.(*UserIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchingEngine_GetOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchingEngineServer).GetOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchingEngine_GetOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchingEngineServer).GetOrders(ctx, req.(*UserIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchingEngine_CreateOrderBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderBookSymbol)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchingEngineServer).CreateOrderBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchingEngine_CreateOrderBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchingEngineServer).CreateOrderBook(ctx, req.(*OrderBookSymbol))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchingEngine_DeleteOrderBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderBookSymbol)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchingEngineServer).DeleteOrderBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchingEngine_DeleteOrderBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchingEngineServer).DeleteOrderBook(ctx, req.(*OrderBookSymbol))
	}
	return interceptor(ctx, in, info, handler)
}

// MatchingEngine_ServiceDesc is the grpc.ServiceDesc for MatchingEngine service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MatchingEngine_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.matchingEngine",
	HandlerType: (*MatchingEngineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlaceOrder",
			Handler:    _MatchingEngine_PlaceOrder_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _MatchingEngine_CancelOrder_Handler,
		},
		{
			MethodName: "GetCurrentOrders",
			Handler:    _MatchingEngine_GetCurrentOrders_Handler,
		},
		{
			MethodName: "GetOrders",
			Handler:    _MatchingEngine_GetOrders_Handler,
		},
		{
			MethodName: "CreateOrderBook",
			Handler:    _MatchingEngine_CreateOrderBook_Handler,
		},
		{
			MethodName: "DeleteOrderBook",
			Handler:    _MatchingEngine_DeleteOrderBook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/api.proto",
}
